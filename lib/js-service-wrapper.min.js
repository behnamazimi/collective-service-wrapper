!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e=e||self).JSServiceWrapper={})}(this,(function(e){"use strict";const t=(()=>{let e;return{getInstance:()=>(e||(e={_debugMode:!1,log(...e){this._debugMode&&console.log(...e)},set debugMode(e){this._debugMode=e},count:0,_services:{},generateNewID(){return this.count++,this.count+"__"+Math.random().toString(32).substr(2).substr(6)},onTurn(e,t){this._services[e]={...this._services[e],listener:t,status:"pending"}},fire(e,...t){this._services[e]&&"function"==typeof this._services[e].listener&&(this.log(`* FIRED: ${e} [type: ${this._services[e].status}]`),this._services[e].status="fired",this._services[e].listener.apply(this,t))},add(e){let t=e;return t&&!this._services[t]||(t=this.generateNewID()),this._services[t]={},this.log("+ ADDED: "+t),t},checkIdleStatus(e,t=!1){return new Promise(i=>{if(this.onTurn(e,i),t)return this._services[e].status="parallel",void this.fire(e);const s=Object.keys(this._services);s.length&&s[0]!==e||this.fire(e)})},removeService(e){delete this._services[e],this.log("- REMOVED: "+e);const t=Object.keys(this._services),i=this._services[t[0]];return i&&"pending"===i.status&&this.fire(t[0]),!0},cancelService(e){return"pending"===this._services[e].status&&(delete this._services[e],!0)}}),e)}})(),i={BEFORE_RESOLVE:"before.resolve",BEFORE_REJECT:"before.reject",BEFORE_FIRE:"before.fire",AFTER_SUCCESS:"after.success",AFTER_FAIL:"after.fail",UPDATE_SERVICE_CONFIG:"update.service-config"},s={__proto__:{HOOKS:i,_hooks:{},client:null,queue:null,_resolveValidation:null,defaultParallelStatus:!0,setClient(e){this.client=e},addToQueue(e){if(this.queue)return this.queue.add(e)},checkQueueStatus(...e){if(this.queue)return this.queue.checkIdleStatus(...e)},removeServiceFromQueue(e){if(this.queue)return this.queue.removeService(e)},cancelService(e){if(this.queue)return this.queue.cancelService(e)},setHook(e,t){return this._hooks[e]=t,this},execHook(e,...t){if(this._hooks[e])return this._hooks[e].apply(null,t)},resolveValidation(e){return!(!this._resolveValidation||"function"!=typeof this._resolveValidation)&&this._resolveValidation(e)},setResolveValidation(e){return this._resolveValidation=e,this},init(e={}){if(!e||"[object Object]"!==e.toString())throw new Error("Invalid options passed.");return e.client&&this.setClient(e.client),e.queue?(this.queue=t.getInstance(),this.queue.debugMode=!!e.queueLogs):this.queue=null,void 0!==e.defaultParallelStatus&&(this.defaultParallelStatus=Boolean(e.defaultParallelStatus)),this}}};s.setResolveValidation(e=>!0),s.setHook(i.BEFORE_RESOLVE,e=>e),s.setHook(i.BEFORE_REJECT,e=>e),s.setHook(i.UPDATE_SERVICE_CONFIG,e=>e);e.ClientHandler=class{constructor(...e){if(this._client=s.client,!this._client||"function"!=typeof this._client)throw new Error("HTTP client must be a function");this._reqConfig=e,this._customHooks={},this._resolveValidation=null}get id(){return this._id}addToQueue(e){this._id=s.addToQueue(e)}cancel(){return!(!this._fireOptions||this._fireOptions.parallel)&&s.removeServiceFromQueue(this._id)}setClient(e){if(!e||"function"!=typeof e)throw new Error("Invalid client passed. Client must be a function");return this._client=e,this}setHook(e,t){return e&&"function"==typeof t&&(this._customHooks[e]=t),this}execHook(e,...t){return this._customHooks[e]&&"function"==typeof this._customHooks[e]?this._customHooks[e].apply(this,t):s.execHook(e,...t)}resolveValidation(e){return this._resolveValidation&&"function"==typeof this._resolveValidation?this._resolveValidation(e):s.resolveValidation(e)}setResolveValidation(e){return this._resolveValidation=e,this}fire(e={}){return this._fireOptions=e,this._fireOptions&&"object"==typeof this._fireOptions||(this._fireOptions={parallel:s.defaultParallelStatus}),this.addToQueue(this._fireOptions.id),this._reqConfig=[this.execHook(i.UPDATE_SERVICE_CONFIG,...this._reqConfig)],new Promise(async(e,t)=>{try{await s.checkQueueStatus(this._id,this._fireOptions.parallel),this.execHook(i.BEFORE_FIRE,this._fireOptions);const o=await this._client(...this._reqConfig);this.resolveValidation(o)?(this.execHook(i.AFTER_SUCCESS,o,this._fireOptions),e(this.execHook(i.BEFORE_RESOLVE,o,this._fireOptions))):(this.execHook(i.AFTER_FAIL,o,this._fireOptions),t(this.execHook(i.BEFORE_REJECT,o,this._fireOptions)))}catch(e){this.execHook(i.AFTER_FAIL,e,this._fireOptions),t(this.execHook(i.BEFORE_REJECT,e,this._fireOptions))}finally{s.removeServiceFromQueue(this._id)}})}},e.HOOKS=i,e.ServiceWrapper=s,Object.defineProperty(e,"__esModule",{value:!0})}));
